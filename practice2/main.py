# var7
# zad 3, 4, 8]

# zad3


import re


# Написать регулярное выражение для проверки адреса IP4. Проверку на превышение значений 255
# включать не нужно.
# Корректные значения: 192.168.0.1, 127.0.0.1, 0.0.0.0, 0.100.200.300
# Некорректные значения: 192.168.0., a.b.c.d, 1234.2345.3456.4567
def ip_validate(ip):
    ipv4_pattern = "^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\" \
                   ".(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\" \
                   ".(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\" \
                   ".(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"

    res = re.match(ipv4_pattern, ip)
    return res


ip_i = input("Введите ip: ")
# pattern_ip = "192.168.0.1"
match_oject = ip_validate(ip_i)
result = match_oject if match_oject is None else match_oject.group(0)
print(result)


# zad4
# Написать регулярное выражение, которое из текстовой строки выделяет положительное десятичное
# число. Число может содержать дробную часть, отделяемую точкой. Число должно отделяться от текста
# пробелами.
# Корректные значения:
# some text 5678.23 some text, some text 0 some text, some text 0.15 some text
# Некорректные значения:
# some text123some text, text 123,4 text, text -123.4 text

def p4(text):
    temp = []
    if re.search("(\\s[0-9]{1,}\\s)",text):
        temp += re.findall("(\\s[0-9]{1,}\\s)",text)
    if (re.search("\\s[0-9]{1,}\.[0-9]{1,}\\s",text)):
        temp += re.findall("\\s[0-9]{1,}\.[0-9]{1,}\\s",text)
    return temp


txt_i = input("Введите строчку содержающую цифры: ")
print(p4(txt_i))


# zad8
# Написать регулярное выражение, проверяющее строку на соответствие даты заданному формату:
# dd.mm.yyyy. Дата в строке должна быть отделена от текста пробелами. Для числа и месяца отводится
# строго по 2 цифры, для года – 4 цифры. Проверку на допустимость чисел (не более 31) и месяца (не
# более 12) реализовывать не нужно.

# Корректные значения: 12.03.2016, 02.05.1928
# Некорректные значения: 12/03/2016, 12-03-2016, 2016.03.12, 2016 03 12, 5.3.2016


def date_validate(date):
    date_pattern = "^[0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{4}$"
    return re.match(date_pattern, date)


in_date = input("Введите корретную дату: ")
date_oject = date_validate(in_date)
result = date_oject if date_oject is None else date_oject.group(0)
print(result)

